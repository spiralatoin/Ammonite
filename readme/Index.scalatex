@import Main._
@import readme.Sample._
@import ammonite.ops._


@a(
  href:="https://github.com/lihaoyi/ammonite",
  position.absolute,
  top:=0,right:=0,border:=0,
  img(
    src:="https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67",
    alt:="Fork me on GitHub"
  )
)


@scalatags.Text.tags2.style
  /* Hacks to make things look better */
  * .hljs-symbol{
    color: #008000;
    font-weight: bold;
    font-style: normal;
  }
  .scalatex-site-Styles-content li{
    margin-bottom: 10px;
  }

@sect("Ammonite", "Scala Scripting")
  @p
    Ammonite lets you use the
    @lnk("Scala programming language", "https://www.scala-lang.org/") for
    scripting purposes: in the @sect.ref("Ammonite-REPL", "REPL"), as
    @sect.ref("Scala Scripts", "scripts"), as a @sect.ref("Ammonite-Ops",
    "library to use in existing projects"), or as a standalone
    @sect.ref("Ammonite-Shell", "systems shell").


  @div(display.flex, flexDirection.row)
    @div(display.flex)
      @div
        @i(cls := "fa fa-refresh", aria.hidden := "true")
      @p
        @sect.ref{Ammonite-REPL}
    @div(display.flex)
      @div
        @i(cls := "fa fa-file-text-o", aria.hidden := "true")
      @p
        @sect.ref{Scala Scripts}
    @div(display.flex)
      @div
        @i(cls := "fa fa-terminal", aria.hidden := "true")
      @p
        @sect.ref{Ammonite-Shell}

  @p
    The goal of Ammonite is to liberate your Scala code from heavyweight
    "projects", using the lightweight Ammonite runtime: if you want to run some
    Scala, open the @sect.ref{Ammonite-REPL} and run it, interactively! If you
    want to run it later, save it into some @sect.ref{Scala Scripts} and run
    those via

  @code
    amm Script.scala
  @p
    And @sect.ref("Script Imports", "import other scripts") or
    @sect.ref("Ivy Dependencies", "libraries") as you need them. At no point do
    you need to mess around with build-files or project-layouts: You just write
    Scala code and run it, simple as that! If you are already working in Scala,
    you no longer have to drop down to Python or Bash for your scripting needs:
    you can use @sect.ref{Scala Scripts} for your scripting needs, and avoid
    the overhead of working in multiple languages.

  @p
    Ammonite provides four main tools:

  @ul
    @li
      @sect.ref{Ammonite-REPL}: a Modernized Scala REPL, with tons of
      @sect.ref("Features", "usability improvements and features")

    @li
      @sect.ref{Scala Scripts}: a format for Lightweight Programming in Scala

    @li
      @sect.ref{Ammonite-Ops}: a Scala Library for convenient, rock-solid
      Filesystem Operations

    @li
      @sect.ref{Ammonite-Shell}: a modern replacement for the @lnk("Bash",
      "https://en.wikipedia.org/wiki/Bash_(Unix_shell)") system shell

  @p
    Each of those projects is usable standalone; click on the links to jump
    straight to their docs, or scroll around and browse through the navigation
    bar on the left. If you're wondering what you can do @i{with} Ammonite,
    there is an

  @ul
    @li
      @sect.ref{Ammonite Cookbook}

  @p
    Which contains a bunch of fun things that you can do, whether in the
    interactive @sect.ref{Ammonite-REPL} or in some @sect.ref{Scala Scripts}.
    You can also take a look at how people are using Ammonite in the wild:

  @ul
    @li
      @sect.ref{In the Wild}

  @p
    To see what people are doing with it. For a video overview of the project
    and it's motivation, check out this talk:

  @iframe(
    src := "https://player.vimeo.com/video/148552858",
    width := 800,
    height := 600,
    "frameborder".attr := 0,
    "webkitallowfullscreen".attr := 1,
    "mozallowfullscreen".attr := 1,
    "allowfullscreen".attr := 1
  )

  @p
    And there are more talks available below:

  @ul
    @li
      @sect.ref{Talks}

@Repl()
@Scripts()
@Ops()
@Shell()
@Cookbook()
@Footer()
