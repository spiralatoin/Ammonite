diff --git a/repl/src/main/scala/ammonite/repl/Repl.scala b/repl/src/main/scala/ammonite/repl/Repl.scala
index f915cc2..5e71fc5 100644
--- a/repl/src/main/scala/ammonite/repl/Repl.scala
+++ b/repl/src/main/scala/ammonite/repl/Repl.scala
@@ -92,7 +92,7 @@ class Repl(input: InputStream,
         case Res.Exit(value) =>
           printStream.println("Bye!")
           value
-        case Res.Failure(msg) => printer.error(msg)
+        case Res.Failure(ex, msg) => printer.error(msg)
         case Res.Exception(ex, msg) =>
           printer.error(
             Repl.showException(ex, colors().error(), colors().reset(), colors().literal())
diff --git a/repl/src/main/scala/ammonite/repl/Util.scala b/repl/src/main/scala/ammonite/repl/Util.scala
index 9cf8b7a..b977e63 100644
--- a/repl/src/main/scala/ammonite/repl/Util.scala
+++ b/repl/src/main/scala/ammonite/repl/Util.scala
@@ -38,11 +38,11 @@ case class Catching(handler: PartialFunction[Throwable, Res.Failing]) {
 object Res{
   def apply[T](o: Option[T], errMsg: => String) = o match{
     case Some(s) => Success(s)
-    case None => Failure(errMsg)
+    case None => Failure(None, errMsg)
   }
   def apply[T](o: Try[T], errMsg: Throwable => String) = o match{
     case util.Success(s) => Success(s)
-    case util.Failure(t) => Failure(errMsg(t))
+    case util.Failure(t) => Failure(None, errMsg(t))
   }
 
   /**
@@ -69,7 +69,7 @@ object Res{
     * Something failed before the code was run, perhaps a compile error
     * or a compiler crash or other infrastructure-y problem
     */
-  case class Failure(s: String) extends Failing
+  case class Failure(ex: Option[Throwable], s: String) extends Failing
 
   /**
     * An exception was thrown when the command was being run
diff --git a/repl/src/main/scala/ammonite/repl/frontend/AmmoniteFrontEnd.scala b/repl/src/main/scala/ammonite/repl/frontend/AmmoniteFrontEnd.scala
index 7225ad4..54a44e4 100644
--- a/repl/src/main/scala/ammonite/repl/frontend/AmmoniteFrontEnd.scala
+++ b/repl/src/main/scala/ammonite/repl/frontend/AmmoniteFrontEnd.scala
@@ -30,6 +30,7 @@ case class AmmoniteFrontEnd(extraFilters: TermCore.Filter = PartialFunction.empt
         Parsers.Splitter.parse(code) match{
           case Parsed.Success(value, idx) => Res.Success((code, value))
           case Parsed.Failure(_, index, extra) => Res.Failure(
+            None,
             fastparse.core.ParseError.msg(extra.input, extra.traced.expected, index)
           )
         }
diff --git a/repl/src/main/scala/ammonite/repl/frontend/FrontEnd.scala b/repl/src/main/scala/ammonite/repl/frontend/FrontEnd.scala
index bda55d0..1ad324a 100644
--- a/repl/src/main/scala/ammonite/repl/frontend/FrontEnd.scala
+++ b/repl/src/main/scala/ammonite/repl/frontend/FrontEnd.scala
@@ -101,6 +101,7 @@ object FrontEnd{
               case Some(Parsed.Failure(p, index, extra)) =>
                 addHistory(code)
                 Res.Failure(
+                  None,
                   fastparse.core.ParseError.msg(extra.input, extra.traced.expected, index)
                 )
               case None => readCode(code + "\n")
diff --git a/repl/src/main/scala/ammonite/repl/interp/Evaluator.scala b/repl/src/main/scala/ammonite/repl/interp/Evaluator.scala
index 3eb2c5c..170dfb0 100644
--- a/repl/src/main/scala/ammonite/repl/interp/Evaluator.scala
+++ b/repl/src/main/scala/ammonite/repl/interp/Evaluator.scala
@@ -199,9 +199,9 @@ object Evaluator{
       res
     }
 
-    def interrupted() = {
+    def interrupted(e: Throwable) = {
       Thread.interrupted()
-      Res.Failure("\nInterrupted!")
+      Res.Failure(Some(e), "\nInterrupted!")
     }
 
     type InvEx = InvocationTargetException
@@ -214,7 +214,7 @@ object Evaluator{
                     on_exception: Throwable => Unit
                    ) = for {
       wrapperName <- Res.Success("cmd" + getCurrentLine)
-      _ <- Catching{ case e: ThreadDeath => interrupted() }
+      _ <- Catching{ case e: ThreadDeath => interrupted(e) }
       (classFiles, newImports) <- compileClass(
         wrapCode(
           wrapperName,
@@ -232,19 +232,14 @@ object Evaluator{
         // Exit
         case Ex(_: InvEx, _: InitEx, ReplExit(value))  => Res.Exit(value)
         // Interrupted during pretty-printing
-        case Ex(e: ThreadDeath)                 =>  on_exception(e)
-                                                    interrupted()
+        case Ex(e: ThreadDeath)                 =>  interrupted(e)
 
         // Interrupted during evaluation
-        case Ex(_: InvEx, e: ThreadDeath)       =>  on_exception(e)
-                                                    interrupted()
-
-        case Ex(_: InvEx, _: InitEx, userEx@_*) =>   on_exception(userEx(0))
-                                                      Res.Exception(userEx(0), "")
-        case Ex(_: InvEx, userEx@_*)            =>   on_exception(userEx(0))
-                                                      Res.Exception(userEx(0), "")
-        case Ex(userEx@_*)                      =>    on_exception(userEx(0))
-                                                      Res.Exception(userEx(0), "")
+        case Ex(_: InvEx, e: ThreadDeath)       =>  interrupted(e)
+
+        case Ex(_: InvEx, _: InitEx, userEx@_*) =>   Res.Exception(userEx(0), "")
+        case Ex(_: InvEx, userEx@_*)            =>   Res.Exception(userEx(0), "")
+        case Ex(userEx@_*)                      =>   Res.Exception(userEx(0), "")
       }
     } yield {
       // Exhaust the printer iterator now, before exiting the `Catching`
diff --git a/repl/src/main/scala/ammonite/repl/interp/Interpreter.scala b/repl/src/main/scala/ammonite/repl/interp/Interpreter.scala
index 3b41644..d556e2f 100644
--- a/repl/src/main/scala/ammonite/repl/interp/Interpreter.scala
+++ b/repl/src/main/scala/ammonite/repl/interp/Interpreter.scala
@@ -125,7 +125,7 @@ class Interpreter(prompt0: Ref[String],
 
     val blocks = blocks0.map(preprocess(_, ""))
     Timer("processScript 1")
-    val errors = blocks.collect{ case Res.Failure(err) => err }
+    val errors = blocks.collect{ case Res.Failure(ex, err) => err }
     Timer("processScript 2")
     // we store the old value, because we will reassign this in the loop
     val outerScriptImportCallback = scriptImportCallback
@@ -156,7 +156,7 @@ class Interpreter(prompt0: Ref[String],
         val ev = evaluate(code, scriptImports)
         Timer("processScript loop 2")
         ev match {
-          case Res.Failure(msg) => throw new CompilationError(msg)
+          case Res.Failure(ex, msg) => throw new CompilationError(msg)
           case Res.Exception(throwable, msg) => throw throwable
           case Res.Success(ev) =>
             val last = Frame.mergeImports(ev.imports, nestedScriptImports)
@@ -186,8 +186,10 @@ class Interpreter(prompt0: Ref[String],
       case Res.Success(ev) =>
         eval.update(ev.imports)
         true
-      case Res.Failure(msg) => true
-      case Res.Exception(ex, msg) => true
+      case Res.Failure(ex, msg) =>    lastException = ex.getOrElse(lastException)
+                                  true
+      case Res.Exception(ex, msg) =>  lastException = ex
+                                      true
     }
   }
 
diff --git a/repl/src/main/scala/ammonite/repl/interp/Preprocessor.scala b/repl/src/main/scala/ammonite/repl/interp/Preprocessor.scala
index a88ca5c..204f997 100644
--- a/repl/src/main/scala/ammonite/repl/interp/Preprocessor.scala
+++ b/repl/src/main/scala/ammonite/repl/interp/Preprocessor.scala
@@ -120,7 +120,7 @@ object Preprocessor{
     def complete(code: String, wrapperId: String, postSplit: Seq[String]) = {
       val reParsed = postSplit.map(p => (parse(p), p))
       val errors = reParsed.collect{case (Left(e), _) => e }
-      if (errors.length != 0) Res.Failure(errors.mkString("\n"))
+      if (errors.length != 0) Res.Failure(None, errors.mkString("\n"))
       else {
         val allDecls = for (((Right(trees), code), i) <- reParsed.zipWithIndex) yield {
           // Suffix the name of the result variable with the index of
diff --git a/repl/src/test/scala/ammonite/repl/TestRepl.scala b/repl/src/test/scala/ammonite/repl/TestRepl.scala
index 1cf5763..b0a0df8 100644
--- a/repl/src/test/scala/ammonite/repl/TestRepl.scala
+++ b/repl/src/test/scala/ammonite/repl/TestRepl.scala
@@ -94,7 +94,7 @@ class TestRepl {
               assert{identity(error); identity(warning); normalize(out) == normalize(expected)}
             )
 
-          case Res.Failure(failureMsg) =>
+          case Res.Failure(ex, failureMsg) =>
             assert({identity(error); identity(warning); identity(out); identity(expected); false})
           case Res.Exception(ex, failureMsg) =>
             val trace = Repl.showException(ex, "", "", "") + "\n" +  failureMsg
@@ -117,7 +117,7 @@ class TestRepl {
       Parsers.split(input).get.get.value
     )
     processed match{
-      case Res.Failure(s) => printer.error(s)
+      case Res.Failure(ex, s) => printer.error(s)
       case Res.Exception(throwable, msg) =>
         printer.error(Repl.showException(throwable, "", "", ""))
       case _ =>
@@ -133,7 +133,7 @@ class TestRepl {
 
     processed match{
       case Res.Success(v) => assert({identity(v); identity(allOutput); false})
-      case Res.Failure(s) =>
+      case Res.Failure(ex, s) =>
         failLoudly(assert(failureCheck(s)))
       case Res.Exception(ex, s) =>
         val msg = Repl.showException(ex, "", "", "") + "\n" + s
